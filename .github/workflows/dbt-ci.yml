name: dbt CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  dbt-compile-and-test:
    name: Compile and Test dbt Models
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dbt and dependencies
        run: |
          pip install --upgrade pip
          pip install dbt-core dbt-postgres dbt-bigquery
          dbt --version
      
      - name: Compile dbt models
        run: |
          dbt compile --target dev --profiles-dir .
        env:
          DBT_PROFILES_DIR: .
      
      - name: Parse dbt project
        run: |
          dbt parse --target dev --profiles-dir .
        env:
          DBT_PROFILES_DIR: .
      
      - name: Generate dbt documentation
        run: |
          dbt docs generate --target dev --profiles-dir .
        env:
          DBT_PROFILES_DIR: .
      
      - name: Check for SQL syntax errors
        run: |
          # Check for common SQL syntax issues
          find models tests -name "*.sql" -type f -exec sh -c 'echo "Checking {}"; grep -n "SELECT.*FROM.*WHERE.*;" {} || true' \;
      
      - name: Validate dbt project structure
        run: |
          # Ensure all required directories exist
          test -d models/staging && echo "✓ Staging directory exists"
          test -d models/intermediate && echo "✓ Intermediate directory exists"
          test -d models/marts && echo "✓ Marts directory exists"
          test -d tests && echo "✓ Tests directory exists"
          test -d macros && echo "✓ Macros directory exists"
      
      - name: Check for documentation
        run: |
          # Ensure schema.yml files exist
          find models -name "_*.yml" -type f | while read file; do
            echo "✓ Found documentation: $file"
          done
      
      - name: Upload dbt artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dbt-artifacts
          path: |
            target/manifest.json
            target/catalog.json
            target/run_results.json
            target/compiled/**/*.sql
          retention-days: 7
      
      - name: Test Summary
        if: always()
        run: |
          echo "## dbt CI/CD Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ All checks completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Models Compiled" >> $GITHUB_STEP_SUMMARY
          echo "- Staging models: $(find models/staging -name '*.sql' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Intermediate models: $(find models/intermediate -name '*.sql' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Marts models: $(find models/marts -name '*.sql' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tests" >> $GITHUB_STEP_SUMMARY
          echo "- Custom tests: $(find tests -name '*.sql' | wc -l)" >> $GITHUB_STEP_SUMMARY

  lint-yaml:
    name: Lint YAML Files
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install yamllint
        run: pip install yamllint
      
      - name: Lint YAML files
        run: |
          yamllint -d "{extends: default, rules: {line-length: {max: 200}, document-start: disable}}" models/ dbt_project.yml || true

  sql-linter:
    name: SQL Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install SQLFluff
        run: pip install sqlfluff sqlfluff-templater-dbt
      
      - name: Lint SQL with SQLFluff
        run: |
          sqlfluff lint models/ tests/ --dialect postgres --ignore parsing,templating || true
        continue-on-error: true
